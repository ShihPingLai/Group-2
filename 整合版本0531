import matplotlib as mpl  
from mpl_toolkits.mplot3d import Axes3D  
import numpy as np  
import matplotlib.pyplot as plt  
import math  
import PIL

mpl.rcParams['legend.fontsize'] = 100  
fig = plt.figure(figsize=(10,10))  
ax = fig.gca(projection='3d') 


#==========set initial condition=============
t=0
g=9.8
#SAMEPLING TIME INTERVAL
dt=1
#RADIUS OF EARTH
e_r0=6371000
#LAUNCHING POSITION
x=0 
y=0
z=6372000
#OBSERVING ANGLE
observe_theta=45
observe_phi=90

#LAUNCHING SPEED
v=7500
#LAUNCHING ANGLE
theta0=70
phi0=45

#============AIR RESISTANCE ADDED===========
air_resistance = False

#RADIUS OF IRON BALL
rb=1
#DENSITY OF IRON BALL
D_ball=7.874
#DENSITY OF AIR
D=1.297

#==============ENGINE ADD==================
engine_added = False

F_engine=7000*1000
engine_functional_time=7500


#==========in x,y,z represent velocity=============
r=(x**2+y**2+z**2)**0.5
phi0_deg= np.deg2rad(phi0)
theta0_deg=np.deg2rad(theta0)
if v == 0:
    v=0.01
vx=v*math.sin(theta0_deg)*math.cos(phi0_deg)
vy=v*math.sin(theta0_deg)*math.sin(phi0_deg)
vz=v*math.cos(theta0_deg)
#mass of iron ball
mb=(4/3)*(rb**3)*D_ball*(10**3)*np.pi
#Cross-sectional area of iron ball
Ab=rb**2*np.pi
#==========some data recording=============
#record initial condition
x0=x
y0=y
z0=z
v0=v
g0=g
r0=r
t0=t
#lists record position
x_lst=[x0/1000000]
y_lst=[y0/1000000]
z_lst=[z0/1000000]
r_lst=[r0/1000000]
t_lst=[t0]
observe_theta=90-observe_theta
#==========plot the earth============= 
U = np.linspace(0, 2 * np.pi, 100)  
V = np.linspace(0, np.pi, 100)  
X = (e_r0/1000000)* np.outer(np.cos(U), np.sin(V)).T 
Y = (e_r0/1000000)* np.outer(np.sin(U), np.sin(V)).T
Z = (e_r0/1000000)* np.outer(np.ones(np.size(U)), np.cos(V)).T
  
#==========x,y,z range=============  
plt.ylim(-10, 10)
plt.xlim(-10, 10) 
ax.set_zlim(-10, 10)

#==========caculation of parameters=============
while r>=e_r0:
    #we must consider gravity in radial direction, using theta
    r=(x**2+y**2+z**2)**0.5
    cos_theta=z/r
    sin_theta=((x**2+y**2)**0.5)/r
    if sin_theta ==0:
      cos_phi=0
      sin_phi=0
    else:
      cos_phi= x/(r*sin_theta)
      sin_phi= y/(r*sin_theta)
    #set almost zero to absoluely zero    
    def zero(a):
        if abs(a)<10**-18 :
          a=0
        else:
          a=a
        return a
        
    gx=-g0*((r0**2)/(r**2))*sin_theta*cos_phi
    gy=-g0*((r0**2)/(r**2))*sin_theta*sin_phi
    gz=-g0*((r0**2)/(r**2))*cos_theta
   
    gx=zero(gx)
    gy=zero(gy)
    gz=zero(gz)
    #caculate the influnce of air resistance
    Fdx=0.5*0.5*D*(vx**2)*Ab*np.sign(vx)
    Fdy=0.5*0.5*D*(vy**2)*Ab*np.sign(vy)
    Fdz=0.5*0.5*D*(vz**2)*Ab*np.sign(vz)
    aFdx=Fdx/mb
    aFdy=Fdy/mb
    aFdz=Fdz/mb
    #acceleration due to enigine
    ax_en=F_engine/mb*(vx/(vx**2+vy**2+vz**2)**0.5)
    ay_en=F_engine/mb*(vy/(vx**2+vy**2+vz**2)**0.5)
    az_en=F_engine/mb*(vz/(vx**2+vy**2+vz**2)**0.5)
    #then we try to caculate
    vx += (gx)*dt
    vy += (gy)*dt
    vz += (gz)*dt
    if air_resistance == True :
        vx -= aFdx*dt
        vy -= aFdy*dt
        vz -= aFdz*dt
    if engine_added == True and t<engine_functional_time :
        vx += ax_en*dt
        vy += ay_en*dt
        vz += az_en*dt
    x  += vx*dt
    y  += vy*dt
    z  += vz*dt
    t  += dt
    #record position in lists
    if r>=e_r0:
      x_lst.append(x/1000000)
      y_lst.append(y/1000000)
      z_lst.append(z/1000000)
      t_lst.append(t)
      r_lst.append(r/1000000)
      xf=x
      yf=y
      zf=z
      rf=r
      tf=t
    #consider when go far away
    if r>(10*e_r0):
        break
        
datas=zip(x_lst,y_lst,z_lst,t_lst)

#===============import facecolors===============
bm = PIL.Image.open('bluemarble_new.jpg')
bm = np.array(bm.resize([d/10 for d in bm.size]))/256.
lons = np.linspace(-180, 180, bm.shape[1]) * np.pi/180 
lats = np.linspace(-90, 90, bm.shape[0])[::-1] * np.pi/180 

#===============ploting figure===============
ax.plot([x0/1000000], [y0/1000000], [z0/1000000], markerfacecolor='w', markeredgecolor='w', marker='o', markersize=5, alpha=0.8)
ax.plot([xf/1000000], [yf/1000000], [zf/1000000], markerfacecolor='r', markeredgecolor='r', marker='X', markersize=15, alpha=0.8)
ax.set_title('PROJECTION SIMULATE',size=40)
ax.set_xlabel('X axis(1000km)',size=15)
ax.set_ylabel('Y axis(1000km)',size=15)
ax.set_zlabel('Z axis(1000km)',size=15)
ax.plot(x_lst, y_lst, z_lst, label='parametric curve')  
ax.plot_surface(X, Y, Z, facecolors = bm)   
ax.view_init(observe_theta, observe_phi)
plt.show()


print "INFORMATION(SI unit)" 
print "Launching Position:(",int(x0),",",int(y0),',',int(z0),")" ,"[white dot]" 
print "Launching speed:", int(v0), "m/s" 
print "Engine power and time:" , int(F_engine/1000), "kN" , int(engine_functional_time), "sec" 
print "launching Angle:", "(θ:",int(theta0), "°",",","φ:",int(phi0) , "°)"
print "Time Require:", int(tf), "sec"
print "Landing Position:(",int(xf),",",int(yf),",",int(zf),")" ,"[red cross]"


plt.plot(t_lst,r_lst)
plt.ylabel("R(1000km)",size=15)
plt.xlabel("time(sec)",size=15)
plt.figure(figsize=(10,8))
plt.show()
